package searchTree;

import java.util.Collection;

/**
 * This class represents a non-empty search tree. An instance of this class
 * should contain:
 * <ul>
 * <li>A key
 * <li>A value (that the key maps to)
 * <li>A reference to a left Tree that contains key:value pairs such that the
 * keys in the left Tree are less than the key stored in this tree node.
 * <li>A reference to a right Tree that contains key:value pairs such that the
 * keys in the right Tree are greater than the key stored in this tree node.
 * </ul>
 *  
 */
 public class NonEmptyTree<K extends Comparable<K>, V> implements Tree<K, V> {

	//	 Provide whatever constructors and instance variables you need
	 private Tree<K, V> left, right;
	 K key;
	 V value;
	
	public V search(K key) {
		int comparison = key.compareTo(this.key);
		if(comparison == 0){
			return this.value;
		}else if(comparison < 0){
			return left.search(key);
		}else
			return right.search(key);
	}
	
	public NonEmptyTree<K, V> insert(K key, V value) {
		int comparison = key.compareTo(this.key);
		 if(comparison < 0)
			 left=left.insert(key, value);
		 if(comparison > 0)
			 right = right.insert(key, value);
		 if (comparison == 0)
			 this.value = value;
		 
		 return this;
	}
	
	public Tree<K, V> delete(K key) {
		throw new UnsupportedOperationException("You must implement this method.");
	}

	public K max() {
		throw new UnsupportedOperationException("You must implement this method.");
	}

	public K min() {
		throw new UnsupportedOperationException("You must implement this method.");
	}

	public int size() {
		throw new UnsupportedOperationException("You must implement this method.");
	}

	public void addKeysToCollection(Collection<K> c) {
		throw new UnsupportedOperationException("You must implement this method.");
	}
	
	public Tree<K,V> subTree(K fromKey, K toKey) {
		throw new UnsupportedOperationException("You must implement this method.");
	}
}